# Copyright (C) 2019 Adolfo E. Garc√≠a
#
# This file is part of STG-8nn-Scaffold.
#
# STG-8nn-Scaffold is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# STG-8nn-Scaffold is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with STG-8nn-Scaffold.  If not, see <https://www.gnu.org/licenses/>.

set(GENERIC_C_FLAGS "-Wall -Wextra -Wredundant-decls -Wmissing-prototypes -Wimplicit-function-declaration -Wshadow -Wno-unused-parameter -Wdouble-promotion -Wswitch-enum -Wfloat-equal -Wconversion -Wtype-limits -Wsign-conversion -Wcast-align -Wmissing-declarations -ffunction-sections -fdata-sections -O0")

if("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "arm")
  ##
  ## ARM specific flags
  ##
  add_definitions(-D__ARM_FP=0) # no floating point unit (def. required by QP/C)
  add_definitions(-DSTM32F0)
  add_definitions(-DSTM32F091xC)
  if("${CMAKE_C_COMPILER_ID}" MATCHES "GNU")
    ##
    ## GNU ARM Toolchain specific flags
    ##
    set(MCU_FLAGS "-mcpu=cortex-m0 -mtune=cortex-m0 -march=armv6-m -mthumb -mfloat-abi=soft")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MCU_FLAGS} ${GENERIC_C_FLAGS} -Wundef -MMD -MP -MF")
  elseif("${CMAKE_ASM_COMPILER_ID}" MATCHES "Clang")
    ##
    ## Clang's ARM Toolchain specific flags
    ##
    set(MCU_FLAGS "--target=armv6m-unknown-none-eabi -mcpu=cortex-m0 -march=armv6m -mthumb -mfloat-abi=soft -mfpu=none")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MCU_FLAGS} -Wno-unused-command-line-argument -ffreestanding ${GENERIC_C_FLAGS}")
  endif()
  set(CMAKE_ASM_FLAGS "${MCU_FLAGS} -Wall -fdata-sections -ffunction-sections")
  set(CMAKE_EXE_LINKER_FLAGS "${MCU_FLAGS} -mthumb --static -specs=nosys.specs -Tstg8nn.ld -Wl,--cref,--gc-sections,-Map=stg8nn.map")
else()
    ##
    ## x86 specific flags
    ##
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic ${GENERIC_C_FLAGS}")
    set(CMAKE_ASM_FLAGS "-Wall -fdata-sections -ffunction-sections -fno-stack-protector")
    if("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
      set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -m32")
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
    endif()
endif()

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "MinSizeRel" CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo Debug DebugFull Profile MinSizeRel"
      FORCE)
    add_definitions(-DNDEBUG) #qpc,libcanard no debug flag
endif()

set(CMAKE_C_STANDARD 99)

set(BUILD_SHARED_LIBS OFF)

##
## Select model option
##

SET(STG_MODEL "model" CACHE STRING "850")
if("${STG_MODEL}" MATCHES "850")
  message(STATUS "STG MODEL: ${STG_MODEL}")
  add_definitions(-DMODEL_STG850)
elseif("${STG_MODEL}" MATCHES "856")
  message(STATUS "STG MODEL: ${STG_MODEL}")
  add_definitions(-DMODEL_STG856)
elseif("${STG_MODEL}" MATCHES "TESTER")
  message(STATUS "STG MODEL: ${STG_MODEL}")
  add_definitions(-DMODEL_TESTER)
else()
  message(FATAL_ERROR "STG MODEL: invalid option")
endif()

##
## Get this revision's commit hash
##

execute_process(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE _GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
add_definitions("-DAPP_SW_GIT_COMMIT_HASH=0x${_GIT_COMMIT_HASH}")

##
## Some diagnostic messages
##

message(STATUS "System: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Git commit hash: 0x${_GIT_COMMIT_HASH}")

##
## Add dependency: qp/c (with qk kernel)
##

if(DEFINED SCAFFOLD_DIR)
  include(${SCAFFOLD_DIR}/CMakeLists_qpc.txt)
else()
  include(CMakeLists_qpc.txt)
endif()

list(APPEND SCAFFOLD_SOURCES ${QPC_SOURCES})
list(APPEND SCAFFOLD_INCLUDE ${QPC_INCLUDE})

##
## Add dependency: libcanard
##

if(DEFINED SCAFFOLD_DIR)
  include(${SCAFFOLD_DIR}/CMakeLists_libcanard.txt)
else()
  include(CMakeLists_libcanard.txt)
endif()

list(APPEND SCAFFOLD_SOURCES ${CANARD_SOURCES})
list(APPEND SCAFFOLD_INCLUDE ${CANARD_INCLUDE})

##
## Add dependency: uavcan dsdl -> C files
##

# This CMakeLists.txt file should be included after including Libcanard's
if(DEFINED SCAFFOLD_DIR)
  include(${SCAFFOLD_DIR}/CMakeLists_uavcan_dsdl.txt)
else()
  include(CMakeLists_uavcan_dsdl.txt)
endif()

list(APPEND SCAFFOLD_SOURCES ${DSDL_C_SOURCES})
list(APPEND SCAFFOLD_INCLUDE ${DSDL_C_INCLUDE})

##
## Add the BSP
##

if(DEFINED SCAFFOLD_DIR)
  include(${SCAFFOLD_DIR}/CMakeLists_bsp.txt)
else()
  include(CMakeLists_bsp.txt)
endif()

list(APPEND SCAFFOLD_SOURCES ${BSP_SOURCES})
list(APPEND SCAFFOLD_INCLUDE ${BSP_INCLUDE})

##
## Add the base application
##

if(DEFINED SCAFFOLD_DIR)
  include(${SCAFFOLD_DIR}/CMakeLists_app.txt)
else()
  include(CMakeLists_app.txt)
endif()

list(APPEND SCAFFOLD_SOURCES ${APP_SOURCES})
list(APPEND SCAFFOLD_INCLUDE ${APP_INCLUDE})
