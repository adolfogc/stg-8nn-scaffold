<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Led}-->
  <class name="Led" superclass="qpc::QMActive">
   <!--${AOs::Led::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Led::blinkPeriod}-->
   <attribute name="blinkPeriod" type="uint32_t" visibility="0x02" properties="0x00">
    <code>= LED_DEFAULT_BLINK_TIMEOUT;</code>
   </attribute>
   <!--${AOs::Led::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Led::SM::initial}-->
    <initial target="../2">
     <initial_glyph conn="97,5,4,1,35,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Led::SM::blink}-->
    <state name="blink">
     <entry brief="armTimer">QTimeEvt_armX(&amp;me-&gt;timeEvt, me-&gt;blinkPeriod, me-&gt;blinkPeriod);</entry>
     <exit brief="disarmTimer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::Led::SM::blink::initial}-->
     <initial target="../5">
      <initial_glyph conn="19,50,5,2,9,-3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::Led::SM::blink::LED_ON}-->
     <tran trig="LED_ON" target="../../3">
      <tran_glyph conn="57,16,1,3,17">
       <action box="7,-2,7,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Led::SM::blink::LED_BLINK}-->
     <tran trig="LED_BLINK">
      <action brief="setBlinkPeriod">LedEvt* ledEvt = (LedEvt*)e;

if(ledEvt-&gt;blinkPeriod &gt; 0U) {
  me-&gt;blinkPeriod = ledEvt-&gt;blinkPeriod;
}

QTimeEvt_rearm(&amp;me-&gt;timeEvt, me-&gt;blinkPeriod);</action>
      <tran_glyph conn="57,30,1,-1,-10">
       <action box="-12,-4,11,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Led::SM::blink::LED_OFF}-->
     <tran trig="LED_OFF" target="../../2">
      <tran_glyph conn="57,36,1,3,17">
       <action box="7,-2,8,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Led::SM::blink::blink_on}-->
     <state name="blink_on">
      <entry brief="LED-&gt;ON">BSP_Led_on();</entry>
      <!--${AOs::Led::SM::blink::blink_on::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../5">
       <tran_glyph conn="34,27,2,0,10">
        <action box="1,5,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,17,22,10">
       <entry box="1,2,10,2"/>
      </state_glyph>
     </state>
     <!--${AOs::Led::SM::blink::blink_off}-->
     <state name="blink_off">
      <entry brief="LED-&gt;OFF">BSP_Led_off();</entry>
      <!--${AOs::Led::SM::blink::blink_off::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../4">
       <tran_glyph conn="19,37,0,2,-10">
        <action box="1,-5,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="17,37,22,10">
       <entry box="1,2,11,2"/>
      </state_glyph>
     </state>
     <state_glyph node="11,9,46,43">
      <entry box="1,2,10,2"/>
      <exit box="1,4,11,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Led::SM::off}-->
    <state name="off">
     <entry brief="LED-&gt;OFF">BSP_Led_off();</entry>
     <!--${AOs::Led::SM::off::LED_BLINK}-->
     <tran trig="LED_BLINK" target="../../1/5">
      <action brief="setBlinkPeriod">LedEvt* ledEvt = (LedEvt*)e;

if(ledEvt-&gt;blinkPeriod &gt; 0U) {
  me-&gt;blinkPeriod = ledEvt-&gt;blinkPeriod;
}</action>
      <tran_glyph conn="74,42,3,1,-35">
       <action box="-10,-4,9,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,33,21,12">
      <entry box="1,2,11,2"/>
     </state_glyph>
    </state>
    <!--${AOs::Led::SM::on}-->
    <state name="on">
     <entry brief="LED-&gt;ON">BSP_Led_on();</entry>
     <!--${AOs::Led::SM::on::LED_BLINK}-->
     <tran trig="LED_BLINK" target="../../1/4">
      <action brief="setBlinkPeriod">LedEvt* ledEvt = (LedEvt*)e;

if(ledEvt-&gt;blinkPeriod &gt; 0U) {
  me-&gt;blinkPeriod = ledEvt-&gt;blinkPeriod;
}</action>
      <tran_glyph conn="74,22,3,1,-35">
       <action box="-10,-4,9,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,12,21,12">
      <entry box="1,2,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="101,54"/>
   </statechart>
  </class>
  <!--${AOs::UavcanNode}-->
  <class name="UavcanNode" superclass="qpc::QMActive">
   <!--${AOs::UavcanNode::spinTimeEvt}-->
   <attribute name="spinTimeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::UavcanNode::statusTimeEvt}-->
   <attribute name="statusTimeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::UavcanNode::wasHardwareInitialized}-->
   <attribute name="wasHardwareInitialized" type="uint_fast8_t" visibility="0x02" properties="0x00">
    <code>= 0U;</code>
   </attribute>
   <!--${AOs::UavcanNode::SM}-->
   <statechart properties="0x00">
    <!--${AOs::UavcanNode::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="4,8,4,3,12,4">
      <action box="0,-2,4,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::UavcanNode::SM::hardwareInit}-->
    <state name="hardwareInit">
     <documentation>Note we use the spin timer here for a different application.</documentation>
     <entry brief="setupTimer">// retry every 500 ms
QTimeEvt_armX(&amp;me-&gt;spinTimeEvt, BSP_TICKS_PER_MS * 5U, BSP_TICKS_PER_MS * 500U);
</entry>
     <exit brief="disarmTimer">QTimeEvt_disarm(&amp;me-&gt;spinTimeEvt);</exit>
     <!--${AOs::UavcanNode::SM::hardwareInit::SPIN_TIMEOUT}-->
     <tran trig="SPIN_TIMEOUT">
      <action brief="initializeHardware">me-&gt;wasHardwareInitialized = BSP_CAN_init(BSP_CAN_getFilterConfig());</action>
      <!--${AOs::UavcanNode::SM::hardwareInit::SPIN_TIMEOUT::[me->wasHardwareInitialized]}-->
      <choice target="../../../2">
       <guard>me-&gt;wasHardwareInitialized</guard>
       <action brief="initCanard">initCanardInstance();</action>
       <choice_glyph conn="17,39,5,2,30,-11">
        <action box="1,1,37,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::UavcanNode::SM::hardwareInit::SPIN_TIMEOUT::[else]}-->
      <choice>
       <guard brief="else"/>
       <choice_glyph conn="17,39,4,-1,4,-5,-19">
        <action box="-4,4,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="17,29,2,-1,10">
       <action box="1,2,26,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="8,14,28,15">
      <entry box="1,2,19,2"/>
      <exit box="1,4,19,2"/>
     </state_glyph>
    </state>
    <!--${AOs::UavcanNode::SM::online}-->
    <state name="online">
     <entry brief="setupTimers">// Spin every 25 ms
QTimeEvt_armX(&amp;me-&gt;spinTimeEvt, UAVCAN_NODE_SPIN_TIMEOUT, UAVCAN_NODE_SPIN_TIMEOUT);
// Send status every 450 ms
QTimeEvt_armX(&amp;me-&gt;statusTimeEvt, UAVCAN_NODE_STATUS_TIMEOUT, UAVCAN_NODE_STATUS_TIMEOUT);
</entry>
     <exit brief="disarmTimers">QTimeEvt_disarm(&amp;me-&gt;spinTimeEvt);
QTimeEvt_disarm(&amp;me-&gt;statusTimeEvt);</exit>
     <!--${AOs::UavcanNode::SM::online::SPIN_TIMEOUT}-->
     <tran trig="SPIN_TIMEOUT">
      <action brief="spin">receiveAll();
sendAll();</action>
      <tran_glyph conn="38,22,3,-1,24">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::UavcanNode::SM::online::STATUS_TIMEOUT}-->
     <tran trig="STATUS_TIMEOUT">
      <action brief="sendStatus">statusUpdate();</action>
      <tran_glyph conn="38,25,3,-1,24">
       <action box="0,-2,22,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::UavcanNode::SM::online::RESTART}-->
     <tran trig="RESTART" target="../../3">
      <tran_glyph conn="68,21,1,3,8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="38,14,30,14">
      <entry box="1,2,14,2"/>
      <exit box="1,4,15,2"/>
     </state_glyph>
    </state>
    <!--${AOs::UavcanNode::SM::aboutToRestart}-->
    <state name="aboutToRestart">
     <entry brief="restart">BSP_restart();</entry>
     <state_glyph node="76,14,16,14">
      <entry box="1,2,15,2"/>
     </state_glyph>
    </state>
    <state_diagram size="94,47"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::led}-->
  <directory name="led">
   <!--${.::led::led_ao.h}-->
   <file name="led_ao.h">
    <text>#ifndef _LED_AO_H
#define _LED_AO_H

#include &quot;qpc.h&quot;

#include &lt;stdint.h&gt;

typedef struct {
    QEvt super; 

    uint32_t blinkPeriod;
} LedEvt;

extern QActive * AO_led;

void Led_ctor(QActive * ao);

#endif // _LED_AO_H</text>
   </file>
   <!--${.::led::led_ao_private.h}-->
   <file name="led_ao_private.h">
    <text>#ifndef _LED_AO_PRIVATE_H
#define _LED_AO_PRIVATE_H

#include &quot;app.h&quot;

enum LedSignals {
  LED_ON_SIG = APP_LED_ON_SIG,
  LED_OFF_SIG = APP_LED_OFF_SIG,
  LED_BLINK_SIG = APP_LED_BLINK_SIG,
  TIMEOUT_SIG = APP_LED_TIMEOUT_SIG
};


#define LED_DEFAULT_BLINK_TIMEOUT (BSP_TICKS_PER_MS * APP_LED_DEFAULT_BLINK_PERIOD_MS)

#endif // _LED_AO_PRIVATE_H</text>
   </file>
   <!--${.::led::led_ao.c}-->
   <file name="led_ao.c">
    <text>#include &quot;qpc.h&quot;
#include &quot;bsp_qpc.h&quot;

#include &quot;app.h&quot;
#include &quot;led_ao.h&quot;
#include &quot;led_ao_private.h&quot;

/* Declarations */
$declare${AOs::Led}

/* Instance */
static Led l_led;

/* Instance pointers */
QActive * AO_led = &amp;l_led.super.super;

/* Constructor */
void Led_ctor(QActive * ao) {
  Led* me = (Led*)ao;
  QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Led_initial));
  QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super.super, TIMEOUT_SIG, 0U);
  me-&gt;blinkPeriod = LED_DEFAULT_BLINK_TIMEOUT;
}

/* Definitions */
$define${AOs::Led}</text>
   </file>
  </directory>
  <!--${.::uavcan_node}-->
  <directory name="uavcan_node">
   <!--${.::uavcan_node::uavcan_node_ao.h}-->
   <file name="uavcan_node_ao.h">
    <text>#ifndef _UAVCAN_NODE_AO_H
#define _UAVCAN_NODE_AO_H

#include &quot;qpc.h&quot;

extern QActive * AO_uavcanNode;

void UavcanNode_ctor(QActive * ao);

#endif /* _UAVCAN_NODE_AO_H */</text>
   </file>
   <!--${.::uavcan_node::uavcan_node_ao_private.h}-->
   <file name="uavcan_node_ao_private.h">
    <text>#ifndef _UAVCAN_NODE_AO_PRIVATE_H
#define _UAVCAN_NODE_AO_PRIVATE_H

#include &quot;app.h&quot;

enum UavcanNodeSignals {
  RESTART_SIG = APP_UAVCAN_RESTART_SIG,
  SPIN_TIMEOUT_SIG = APP_UAVCAN_SPIN_TIMEOUT_SIG,
  STATUS_TIMEOUT_SIG = APP_UAVCAN_STATUS_TIMEOUT_SIG
};

#define UAVCAN_NODE_SPIN_TIMEOUT (BSP_TICKS_PER_MS * APP_UAVCAN_NODE_SPIN_PERIOD_MS)
#define UAVCAN_NODE_STATUS_TIMEOUT (BSP_TICKS_PER_MS * APP_UAVCAN_NODE_STATUS_PERIOD_MS)

#endif /* _UAVCAN_NODE_AO_PRIVATE_H */</text>
   </file>
   <!--${.::uavcan_node::uavcan_node_ao.c}-->
   <file name="uavcan_node_ao.c">
    <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot; /* Board Support Package interface */
#include &quot;app.h&quot;
#include &quot;uavcan_node.h&quot;
#include &quot;uavcan_node_callbacks.h&quot;
#include &quot;uavcan_node_ao.h&quot;
#include &quot;uavcan_node_ao_private.h&quot;
#include &quot;led_ao.h&quot;

#include &quot;uavcan/protocol/GetNodeInfo.h&quot;
#include &quot;uavcan/protocol/NodeStatus.h&quot;
#include &quot;uavcan/protocol/RestartNode.h&quot;

/* Declarations */
$declare${AOs::UavcanNode}

static void initCanardInstance(void);
static void sendAll(void);
static void receiveAll(void);
static void statusUpdate(void);
static void restartNodeHandle(CanardRxTransfer *transfer);
static void getNodeInfoHandle(CanardRxTransfer *transfer);
static uint32_t makeNodeStatusMessage(uint8_t *messageBuffer);
static uint32_t makeNodeInfoMessage(uint8_t *messageBuffer);

/* Instances */
static UavcanNode l_uavcanNode;

static CanardInstance l_canardInstance;
static uint8_t l_canardMemoryPool[APP_CANARD_MEMORY_POOL_SIZE];

/* Instance pointers */
QActive * AO_uavcanNode = &amp;l_uavcanNode.super.super;


/* Constructor */
void UavcanNode_ctor(QActive * ao) {
  UavcanNode* me = (UavcanNode*) ao;
  QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;UavcanNode_initial));
  QTimeEvt_ctorX(&amp;me-&gt;spinTimeEvt, &amp;me-&gt;super.super, SPIN_TIMEOUT_SIG, 0U);
  QTimeEvt_ctorX(&amp;me-&gt;statusTimeEvt, &amp;me-&gt;super.super, STATUS_TIMEOUT_SIG, 0U);
}

/* Helpers */
static void initCanardInstance(void) {
  canardInit(&amp;l_canardInstance, l_canardMemoryPool, APP_CANARD_MEMORY_POOL_SIZE, onTransferReceived,
             shouldAcceptTransfer, NULL);

  canardSetLocalNodeID(&amp;l_canardInstance, APP_UAVCAN_DEFAULT_NODE_ID);
}

static void sendAll(void) {
  while (canardPeekTxQueue(&amp;l_canardInstance) != NULL) {
    const BSP_CAN_RxTxResult result = BSP_CAN_transmitOnce(canardPeekTxQueue(&amp;l_canardInstance));
    switch (result) {
    case BSP_CAN_RXTX_TIMEOUT:
      /* TODO: handle case */
      break;
    case BSP_CAN_RXTX_SUCCESS:
      canardPopTxQueue(&amp;l_canardInstance);
      break;
    case BSP_CAN_RXTX_ERROR:
      /* TODO: handle case */
      break;
    default:
      /* This path should be unreacheable */
      break;
    }
  }
}

static void receiveAll(void) {
  CanardCANFrame rxFrame;
  bool timedOut = false;

  while (!timedOut) {
    switch (BSP_CAN_receiveOnce(&amp;rxFrame)) {
    case BSP_CAN_RXTX_TIMEOUT:
      /* No more frames are available */
      timedOut = true;
      break;
    case BSP_CAN_RXTX_SUCCESS:
      canardHandleRxFrame(&amp;l_canardInstance, &amp;rxFrame, BSP_upTimeSeconds());
      break;
    case BSP_CAN_RXTX_ERROR:
      /* TODO: handle case */
      break;
    default:
      /* This path should be unreacheable */
      break;
    }
  }
}

static void statusUpdate(void) {
  /* The transferId variable MUST BE STATIC; refer to the libcanard documentation for the explanation. */
  static uint8_t transferId = 0U;

  uint8_t messageBuffer[UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE] = {0U};
  const uint32_t len = makeNodeStatusMessage(messageBuffer);

  canardBroadcast(&amp;l_canardInstance, UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE, UAVCAN_PROTOCOL_NODESTATUS_ID, &amp;transferId,
                  CANARD_TRANSFER_PRIORITY_LOW, messageBuffer, (uint16_t)len);
}

static void restartNodeHandle(CanardRxTransfer *transfer) {
  uint8_t buffer[UAVCAN_PROTOCOL_RESTARTNODE_REQUEST_MAX_SIZE] = {0U};

  uavcan_protocol_RestartNodeRequest request = {0};
  uavcan_protocol_RestartNodeRequest_decode(transfer, transfer-&gt;payload_len, &amp;request, (uint8_t **)0U);

  uavcan_protocol_RestartNodeResponse response = {.ok = request.magic_number ==
                                                        UAVCAN_PROTOCOL_RESTARTNODE_REQUEST_MAGIC_NUMBER};

  const uint32_t len = uavcan_protocol_RestartNodeResponse_encode(&amp;response, buffer);

  int result =
      canardRequestOrRespond(&amp;l_canardInstance, transfer-&gt;source_node_id, UAVCAN_PROTOCOL_RESTARTNODE_SIGNATURE,
                             UAVCAN_PROTOCOL_RESTARTNODE_ID, &amp;transfer-&gt;transfer_id, transfer-&gt;priority, CanardResponse,
                             buffer, (uint16_t)len);

  if (result &gt;= 0 &amp;&amp; response.ok) {
    static const QEvt aboutToRestartEvt = {QEVT_INITIALIZER(RESTART_SIG)};
    QACTIVE_POST(AO_uavcanNode, &amp;aboutToRestartEvt, (void *)0U);
  }
}

static void getNodeInfoHandle(CanardRxTransfer *transfer) {
  uint8_t messageBuffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_NAME_MAX_LENGTH] = {0U};
  const uint32_t len = makeNodeInfoMessage(messageBuffer);

  int result =
      canardRequestOrRespond(&amp;l_canardInstance, transfer-&gt;source_node_id, UAVCAN_PROTOCOL_GETNODEINFO_SIGNATURE,
                             UAVCAN_PROTOCOL_GETNODEINFO_ID, &amp;transfer-&gt;transfer_id, transfer-&gt;priority, CanardResponse,
                             messageBuffer, (uint16_t)len);
  (void)result; /* Unused */
}

static uint32_t makeNodeStatusMessage(uint8_t *messageBuffer) {
  uavcan_protocol_NodeStatus nodeStatus = {.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK,
                                           .mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL,
                                           .uptime_sec = BSP_upTimeSeconds()};

  return uavcan_protocol_NodeStatus_encode(&amp;nodeStatus, messageBuffer);
}

static uint32_t makeNodeInfoMessage(uint8_t *messageBuffer) {
  uavcan_protocol_GetNodeInfoResponse nodeInfoResponse = {.name.data = (uint8_t *)APP_UAVCAN_NODE_NAME_DATA,
                                                          .name.len = APP_UAVCAN_NODE_NAME_LEN,

                                                          .status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK,
                                                          .status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL,
                                                          .status.uptime_sec = BSP_upTimeSeconds(),

                                                          .software_version.major = APP_SW_VERSION_MAJOR,
                                                          .software_version.minor = APP_SW_VERSION_MINOR,
                                                          .software_version.optional_field_flags = 1U,
                                                          .software_version.vcs_commit = APP_SW_GIT_COMMIT_HASH, /* DEFINED BY CMAKE */

                                                          .hardware_version.major = APP_HW_VERSION_MAJOR,
                                                          .hardware_version.minor = APP_HW_VERSION_MINOR};

  BSP_readUniqueID(&amp;(nodeInfoResponse.hardware_version.unique_id[0])); /* Writes unique ID into the buffer */

  return uavcan_protocol_GetNodeInfoResponse_encode(&amp;nodeInfoResponse, messageBuffer);
}

bool shouldAcceptTransferDefault(const CanardInstance *instance, uint64_t *outDataTypeSignature,
                                        uint16_t dataTypeId, CanardTransferType transferType, uint8_t sourceNodeId) {
  (void)instance;
  (void)sourceNodeId; /* not used yet */

  bool accept = false;
  switch (dataTypeId) {
  case UAVCAN_PROTOCOL_GETNODEINFO_ID:
    *outDataTypeSignature = UAVCAN_PROTOCOL_GETNODEINFO_SIGNATURE;
    accept = true;
    break;
  case UAVCAN_PROTOCOL_RESTARTNODE_ID:
    *outDataTypeSignature = UAVCAN_PROTOCOL_RESTARTNODE_SIGNATURE;
    accept = true;
    break;
  default:
    accept = shouldAcceptTransferExtend(instance, outDataTypeSignature, dataTypeId, transferType, sourceNodeId);
    break;
  }

  return accept;
}

bool shouldAcceptTransferExtendDefault(const CanardInstance *instance, uint64_t *outDataTypeSignature,
                                              uint16_t dataTypeId, CanardTransferType transferType,
                                              uint8_t sourceNodeId) {
  (void)instance;
  (void)outDataTypeSignature;
  (void)dataTypeId;
  (void)transferType;
  (void)sourceNodeId; /* not used yet */

  return false;
}

void onTransferReceivedDefault(CanardInstance *instance, CanardRxTransfer *transfer) {
  (void)instance; /* not used yet */

  switch (transfer-&gt;data_type_id) {
  case UAVCAN_PROTOCOL_GETNODEINFO_ID:
    if (transfer-&gt;transfer_type == CanardTransferTypeRequest) {
      getNodeInfoHandle(transfer);
    }
    break;
  case UAVCAN_PROTOCOL_RESTARTNODE_ID:
    if (transfer-&gt;transfer_type == CanardTransferTypeRequest) {
      restartNodeHandle(transfer);
    }
    break;
  default:
    onTransferReceivedExtend(instance, transfer);
    break;
  }
}

void onTransferReceivedExtendDefault(CanardInstance *instance, CanardRxTransfer *transfer) {
  (void)instance;
  (void)transfer;
}

/* Definitions */
$define${AOs::UavcanNode}</text>
   </file>
  </directory>
 </directory>
</model>
